FROM ubuntu:22.04


# 환경 변수 설정
ENV Z_VERSION=0.8.0 \
    LOG_TAG="[ZEPPELIN_0.8.0]" \
    Z_HOME="/zeppelin" \
    LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    JAVA_HOME="/usr/lib/jvm/java-8-openjdk-arm64" \
    SPARK_VERSION="2.3.2" \
    PATH="/opt/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
    PYSPARK_PYTHON=python3

# 시스템 설정 및 패키지 설치
RUN set -xe && \
    echo '#!/bin/sh' > /usr/sbin/policy-rc.d && \
    echo 'exit 101' >> /usr/sbin/policy-rc.d && \
    chmod +x /usr/sbin/policy-rc.d && \
    dpkg-divert --local --rename --add /sbin/initctl && \
    cp -a /usr/sbin/policy-rc.d /sbin/initctl && \
    sed -i 's/^exit.*/exit 0/' /sbin/initctl && \
    echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup && \
    echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean && \
    echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean && \
    echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean && \
    echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages && \
    echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes && \
    echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests && \
    apt-get update && \
    apt-get install -y locales software-properties-common build-essential wget curl grep sed dpkg && \
    locale-gen $LANG && \
    apt-get install -y openjdk-8-jdk-headless && \
    apt-get install -y git && \
    apt-get install -y tini && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* 
    
# Python 3.7 설치
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.7 python3.7-distutils && \
    apt-get install -y python3.7-venv python3.7-dev && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1 && \
    update-alternatives --set python3 /usr/bin/python3.7 && \
    python3.7 -m ensurepip && \
    python3.7 -m pip install --upgrade pip setuptools wheel

RUN wget -O /tmp/zeppelin-${Z_VERSION}-bin-all.tgz https://archive.apache.org/dist/zeppelin/zeppelin-${Z_VERSION}/zeppelin-${Z_VERSION}-bin-all.tgz && \
    tar -zxvf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz && \
    rm -rf /tmp/zeppelin-${Z_VERSION}-bin-all.tgz && \
    mv /zeppelin-${Z_VERSION}-bin-all ${Z_HOME} && \
    wget https://archive.apache.org/dist/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop2.7.tgz && \
    tar -xvzf spark-${SPARK_VERSION}-bin-hadoop2.7.tgz && \
    rm -f spark-${SPARK_VERSION}-bin-hadoop2.7.tgz && \
    mv /zeppelin/conf/zeppelin-env.sh.template /zeppelin/conf/zeppelin-env.sh && \
    echo "SPARK_HOME=/spark-${SPARK_VERSION}-bin-hadoop2.7" >> /zeppelin/conf/zeppelin-env.sh

# 추가 설정 및 패키지 설치
# 여기에 필요한 추가 설정을 포함시키세요.

# 포트 노출
EXPOSE 8080

# Git 리포지토리 클론 및 설정
RUN git clone https://github.com/FVBros/Spark-The-Definitive-Guide.git && \
    mv Spark-The-Definitive-Guide/data /

# 작업 디렉토리 설정
WORKDIR /zeppelin

# 시작 명령어 설정
ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["/zeppelin/bin/zeppelin.sh"]
